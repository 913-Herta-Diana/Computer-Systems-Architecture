     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  segment data use32 class=data
    10 00000000 5777                        a dw 0111011101010111b
    11 00000002 BE9B                        b dw 1001101110111110b
    12 00000004 00000000                    c dd 0
    13                                  
    14                                  ;Given the words A and B, compute the doubleword C as follows:
    15                                  ;the bits 0-3 of C are the same as the bits 5-8 of B
    16                                  ;the bits 4-8 of C are the same as the bits 0-4 of A
    17                                  ;the bits 9-15 of C are the same as the bits 6-12 of A
    18                                  ;the bits 16-31 of C are the same as the bits of B
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;a
    22 00000000 66BB0000                        mov bx,0
    23 00000004 66A1[02000000]                  mov ax,[b] ;isolating the bits 10-12
    24 0000000A 6625E001                        and ax,0000000111100000b; we only take 5-8 bits of B
    25 0000000E B105                            mov cl,5
    26 00000010 66C1C805                        ror ax,5
    27 00000014 6609C3                          or bx,ax
    28                                          ;b
    29 00000017 66A1[00000000]                  mov ax,[a]
    30 0000001D 6683E01F                        and ax,0000000000011111b
    31 00000021 B104                            mov cl,4
    32 00000023 66D3C0                          rol ax,cl
    33 00000026 6609C3                          or bx,ax
    34                                          ;c
    35 00000029 66A1[00000000]                  mov ax,[a]
    36 0000002F 6625C01F                        and ax,0001111111000000b
    37 00000033 B106                            mov cl,6
    38 00000035 66D3C0                          rol ax,cl
    39 00000038 6609C3                          or bx,ax
    40                                          ;d
    41                                          
    42 0000003B 66A1[02000000]                  mov ax, [b]
    43 00000041 66BA0000                        mov dx, 0
    44 00000045 6652                            push dx
    45 00000047 6650                            push ax
    46 00000049 58                              pop eax; 
    47 0000004A C1C010                          rol eax, 16
    48 0000004D 09C3                            or ebx, eax
    49                                          
    50                                          
    51                                          
    52 0000004F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    53 00000051 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
