     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ;2/(a+b*c-9)+e-d
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 04                          a db 4
    16 00000001 02                          b db 2
    17 00000002 03                          c db 3
    18 00000003 04000000                    d dd 4
    19 00000007 0500000000000000            e dq 5
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 66BB0200                        mov bx,2;bx=2
    26 00000004 A0[01000000]                    mov al,[b];al=b
    27 00000009 F625[02000000]                  mul byte[c] ;ax=al*c=b*c
    28 0000000F 0205[00000000]                  add al,[a] ;b*c+a
    29 00000015 2C09                            sub al,9;al=b*c+a-9
    30 00000017 88C1                            mov cl,al ;cl=al=b*c+a-9
    31 00000019 6689D8                          mov ax,bx
    32 0000001C F6F1                            div cl ;ax=quotient=2/(b*c+1-9) word
    33 0000001E 66BA0000                        mov dx,0;unsigned conversion from ax to dx:ax=2/(b*c+1-9) double word
    34 00000022 668B1D[03000000]                mov bx,word[d]
    35 00000029 668B0D[05000000]                mov cx,word[d+2]
    36 00000030 6629D8                          sub ax,bx
    37 00000033 6619CA                          sbb dx,cx
    38 00000036 6652                            push dx
    39 00000038 6650                            push ax
    40 0000003A 58                              pop eax; eax=2/(b*c+1-9)-d double word *problems with the quadword
    41 0000003B BA00000000                      mov edx,0
    42 00000040 0305[07000000]                  add eax,dword[e]
    43 00000046 1315[0B000000]                  adc edx,dword[e+4] ;edx:eax=2/(a+b*c-9)+e-d
    44                                          
    45                                          
    46                                          
    47                                          ; exit(0)
    48 0000004C 6A00                            push dword 0      ; push the parameter for exit onto the stack
    49 0000004E FF15[00000000]                  call[exit]       ; call exit to terminate the program
