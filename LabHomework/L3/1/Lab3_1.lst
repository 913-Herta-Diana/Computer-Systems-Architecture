     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  ;(b+b)+(c-a)+d
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 04                          a db 4
    16 00000001 0500                        b dw 5
    17 00000003 07000000                    c dd 7
    18 00000007 0200000000000000            d dq 2
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          
    24                                          
    25                                          
    26 00000000 66A1[01000000]                  mov ax,[b]
    27 00000006 660305[01000000]                add ax,[b] ;ax=b+b(words)
    28 0000000D 6689C3                          mov bx,ax ;bx=b+b (words)
    29 00000010 66B90000                        mov cx,0; cx:bx=b+b (double words)
    30 00000014 6689D8                          mov ax,bx
    31 00000017 6689CA                          mov dx,cx ;dx:ax=b+b
    32 0000001A 8A1D[00000000]                  mov bl,[a] 
    33 00000020 B700                            mov bh,0 ; convert a to a word
    34 00000022 66B90000                        mov cx,0; convert a to double word
    35                                          ;cx:bx = a
    36 00000026 6629D8                          sub ax,bx
    37 00000029 6619CA                          sbb dx,cx ; ax=b+b-a
    38 0000002C 6652                            push dx
    39 0000002E 6650                            push ax
    40 00000030 58                              pop eax; eax=b+b-a
    41 00000031 0305[03000000]                  add eax,[c]
    42 00000037 BA00000000                      mov edx, 0 ;edx:eax = b+b-a+c
    43 0000003C 0305[07000000]                  add eax, dword[d]
    44 00000042 1315[0B000000]                  adc edx, dword [d+4] ;edx:eax = b+b-a+c+d
    45                                          
    46                                          
    47                                          
    48                                          
    49                                          
    50                                          
    51                                          
    52                                          
    53                                          ; exit(0)
    54 00000048 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 0000004A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
